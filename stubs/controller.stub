<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Repositories\Sample\SampleInterface;
use Brian2694\Toastr\Facades\Toastr;

class {{ class }} extends Controller
{
    public function __construct(private SampleInterface $repository){}

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $perPage = request('per_page') ?? env('PER_PAGE');
        $data = $this->repository->allPaginate($perPage);
        return view('{{ model }}.index', compact('data'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('{{ model }}.create', compact());
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        try {
            $data = $this->repository->store($request);
            Toastr::success('Model Create Successfully');
            return redirect()->route('{{ model }}.index');
        } catch (\Exception $e) {
            Toastr::error($e->getMessage());
            return redirect()->route('{{ model }}.index');
        }
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        $data = $this->repository->show($id);
        return view('{{ model }}.show', compact('data'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        $data = $this->repository->show($id);
        return view('{{ model }}.edit', compact('data'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        try {
            $data = $this->repository->update($request, $id);
            Toastr::success('Model Updated Successfully');
            return redirect()->route('{{ model }}.index');
        } catch (\Exception $e) {
            Toastr::error($e->getMessage());
            return redirect()->route('{{ model }}.index');
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        try {
            $data = $this->repository->delete($id);
            Toastr::success('Model Deleted Successfully');
            return redirect()->route('{{ model }}.index');
        } catch (\Exception $e) {
            Toastr::error($e->getMessage());
            return redirect()->route('{{ model }}.index');
        }
    }

    /**
     * Change the status specified resource from storage.
     */
    public function status(string $id)
    {
        try {
            $data = $this->repository->status($id);
             return response()->json([
                'type' => 'success',
                'message' => 'Status Updated'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'type' => 'error',
                'message' => $e->getMessage()
            ]);
        }
    }
}
